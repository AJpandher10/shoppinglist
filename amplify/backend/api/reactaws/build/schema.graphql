
type FoodItem {
  id: ID!
  name: String!
  description: String
  price: Float!
  image: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelFoodItemConnection {
  items: [FoodItem]!
  nextToken: String
}

input ModelFoodItemFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  price: ModelFloatInput
  image: ModelStringInput
  and: [ModelFoodItemFilterInput]
  or: [ModelFoodItemFilterInput]
  not: ModelFoodItemFilterInput
}

type Query {
  getFoodItem(id: ID!): FoodItem
  listFoodItems(filter: ModelFoodItemFilterInput, limit: Int, nextToken: String): ModelFoodItemConnection
}

input ModelFoodItemConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  price: ModelFloatInput
  image: ModelStringInput
  and: [ModelFoodItemConditionInput]
  or: [ModelFoodItemConditionInput]
  not: ModelFoodItemConditionInput
}

input CreateFoodItemInput {
  id: ID
  name: String!
  description: String
  price: Float!
  image: String
}

input UpdateFoodItemInput {
  id: ID!
  name: String
  description: String
  price: Float
  image: String
}

input DeleteFoodItemInput {
  id: ID!
}

type Mutation {
  createFoodItem(input: CreateFoodItemInput!, condition: ModelFoodItemConditionInput): FoodItem
  updateFoodItem(input: UpdateFoodItemInput!, condition: ModelFoodItemConditionInput): FoodItem
  deleteFoodItem(input: DeleteFoodItemInput!, condition: ModelFoodItemConditionInput): FoodItem
}

input ModelSubscriptionFoodItemFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  price: ModelSubscriptionFloatInput
  image: ModelSubscriptionStringInput
  and: [ModelSubscriptionFoodItemFilterInput]
  or: [ModelSubscriptionFoodItemFilterInput]
}

type Subscription {
  onCreateFoodItem(filter: ModelSubscriptionFoodItemFilterInput): FoodItem @aws_subscribe(mutations: ["createFoodItem"])
  onUpdateFoodItem(filter: ModelSubscriptionFoodItemFilterInput): FoodItem @aws_subscribe(mutations: ["updateFoodItem"])
  onDeleteFoodItem(filter: ModelSubscriptionFoodItemFilterInput): FoodItem @aws_subscribe(mutations: ["deleteFoodItem"])
}

